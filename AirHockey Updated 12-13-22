var player1x = height/2;
var player2x = height/2;
var player1Score = 0;
var player2Score = 0;
var ball;
var gameStarted = false;
var t = 0;

//Constants
var PAUSE_TIME = 60;
var PLAYER_MOVE_SPEED = 10;
var BALL_SPEED = 5;
var PADDLE_HEIGHT = 50;
var PADDLE_WIDTH = 50;

angleMode = "degrees";

var Ball = function(position, speed) {
    this.position = position;
    this.speed = speed || BALL_SPEED;
    
    this.radius = 12;
    
    this.resetVelocity = function() {
        this.theta = random(0, 360);
        this.velocity = new PVector(
        this.speed*cos(this.theta), -this.speed*sin(this.theta));
        player2x = height/2;
    };
    this.resetVelocity();
    
    this.draw = function() {
        fill(255, 0, 0);
        noStroke();
        ellipse(this.position.x, this.position.y,
        this.radius*2, this.radius*2);
    };
    
    this.collideWithPaddle = function(x, y) {
        if (this.position.x - this.radius < x + PADDLE_HEIGHT/2 &&
        this.position.x + this.radius > x - PADDLE_HEIGHT/2) {
            if (dist(0, this.position.y, 0, y) <
            PADDLE_WIDTH/2 + this.radius) {
                if (this.position.x > x) {
                    this.position.x = x + 
                    this.radius + PADDLE_HEIGHT/2;
                }
                else if (this.position.x < x) {
                    this.position.x = x - 
                    this.radius - PADDLE_HEIGHT/2;
                }
                this.velocity.mult(new PVector(-1, 1));
            }
        }
    };
    
    this.update = function() {
        //Handle wall collisions
        if (this.position.y > 400) {
            player2Score++;
            this.position = new PVector(width/2, height/2);
            gameStarted = false;
            this.resetVelocity();
        }
        else if (this.position.y < 0 ) {
            player1Score++;
            this.position = new PVector(width/2, height/2);
            gameStarted = false;
            this.resetVelocity();
        }
        if (this.position.y < 0) {
            this.position.y = 0;
            this.velocity.mult(new PVector(1, -1));
        }
        else if (this.position.x > height) {
            this.position.x = height;
            this.velocity.mult(new PVector(1, -1));
        }
        
        //Handle paddle collisions
        this.collideWithPaddle(20, player1x);
        this.collideWithPaddle(width-20, player2x);
        
        this.position.add(this.velocity);
    };
};

ball = new Ball(new PVector(width/2, height/2));

var drawScores = function() {
    var s;
    
    fill(0, 0, 0);
    textSize(20);
    
    s = "Player 1: " + player1Score;
    text(s, width*0.14-textWidth(s)/2, 389);
    s = "Player 2: " + player2Score;
    text(s, width*0.85-textWidth(s)/2, 26);
};

var drawPlayer2 = function() {
    if (abs(player2x-ball.position.x) < PLAYER_MOVE_SPEED){
        player2x = ball.position.x;
    }
    else if (player2x-ball.position.x >= PLAYER_MOVE_SPEED) {
        player2x -= PLAYER_MOVE_SPEED;
    }
    else if (player2x-ball.position.x <= PLAYER_MOVE_SPEED) {
        player2x += PLAYER_MOVE_SPEED;
    }
    
};

//Move the player up
var movePlayerLeft = function() {
    player1x -= PLAYER_MOVE_SPEED;
};

//Move the player down
var movePlayerRight = function() {
    player1x += PLAYER_MOVE_SPEED;
};

var drawPlayers = function() {
    //Constrain the player movement
    player1x = constrain(player1x, 0, 400);
    
    rectMode(CENTER);
    fill(0, 0, 0);
    ellipse( player1x, 369, PADDLE_WIDTH, PADDLE_HEIGHT);
    ellipse( player2x, width-369, PADDLE_WIDTH, PADDLE_HEIGHT);
};

draw = function() {
    //Control Player 1
    if (keyIsPressed) {
        if (keyCode ===  RIGHT){
            movePlayerRight(); 
        }
        else if (keyCode === LEFT) {
            movePlayerLeft();
        }
        
    }

    //Draw the environment
    background(255, 255, 255);
    drawPlayer2();
   
    drawPlayers();
    drawScores();
    stroke(0, 0, 0);
    
    //Draw the ball
    ball.draw();
    
    if (!gameStarted) {
        t++;
        if (t >= PAUSE_TIME) {
            t = 0;
            gameStarted = true;
        }
        return;
    }
    
    ball.update();
};
